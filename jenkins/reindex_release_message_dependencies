#!/usr/bin/env python

"""This script reindexes the release msg/srv packages and if there's been a
   change on the list available from rosdistro.
   
   - run from the root of the rosjava_messages directory, i.e.
        roscd rosjava_messages
        ./jenkins/reindex_release_message_dependencies
   
   What it does in gory detail:
   
   - checks for differences with a scraping from the current rosdistro
   - compares with the currently stored packages.list
   - if there's differences, updates package.xml from the template
     - and also saves the new list in packages.list
     
   This is typically run as part of a jenkins build.  
"""

##############################################################################
# Imports
##############################################################################

from __future__ import print_function
import argparse
import os
import sys
import difflib
from string import Template
import xml.etree.ElementTree as ElementTree
from rosjava_build_tools import scrape_for_release_message_packages
import rosjava_build_tools.console as console

##############################################################################
# Substitution
##############################################################################

def get_current_version():
    package_xml_path = os.path.join(os.getcwd(), 'package.xml')
    tree = ElementTree.parse(package_xml_path)
    root = tree.getroot()
    version = root.find('version').text
    return version

def bump_version(version):
    version_numbers = version.split('.')
    version_numbers[2] = str(int(version_numbers[2]) + 1)
    return ('.').join(version_numbers)

def generate_package_xml(packages):
    package_xml_template_path = os.path.join(os.getcwd(), 'package.xml.template')
    with open(package_xml_template_path, 'r') as f:
        package_xml_template = Template(f.read())
    substitution_dictionary = {'build_depends_list': "", 'version': '0.1.0'}
    substitution_dictionary['version'] = bump_version(get_current_version())
    console.pretty_println("Version Bump -> %s\n" % substitution_dictionary['version'], console.yellow)
    for package in packages:
        substitution_dictionary['build_depends_list'] += "  <build_depend>" + package['name'] + "</build_depend>\n"
    return package_xml_template.substitute(substitution_dictionary)

##############################################################################
# Main
##############################################################################

if __name__ == "__main__":
    package_xml_path = os.path.join(os.getcwd(), 'package.xml')
    package_list_path = os.path.join(os.getcwd(), 'package.list')
    if not os.path.isfile(package_xml_path):
        console.logerror("no package.xml found - execute this script from the root of rosjava_messages")
        sys.exit(1)
    try:
        packages = scrape_for_release_message_packages('indigo')
        contents = ""
        for package in packages:
            contents += "%s %s\n" % (package['name'], package['version'])
        with open(package_list_path, 'r') as f:
            old_contents = f.read()
        requires_update = False
        for line in difflib.unified_diff(old_contents.splitlines(), contents.splitlines(), fromfile='before.py', tofile='after.py'):
            requires_update = True
            if line:
                console.loginfo("%s" % line)
        if not requires_update:
            console.pretty_println("No update required.", console.yellow)
            sys.exit(0)
        new_package_xml = generate_package_xml(packages)
        with open(package_list_path, 'w') as f:
            f.write(contents)
        with open(package_xml_path, 'w') as f:
            f.write(new_package_xml)
        console.pretty_println("package.xml and package.list updated.\n")
        sys.exit(1)  # drop out with failure so I get an email (until I can automate a rosdistro pull request).
        
    except Exception as e:
        console.logerror("%s : %s" % (str(e), type(e)))
        sys.exit(1)
